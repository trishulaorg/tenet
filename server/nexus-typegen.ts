/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Date";
    /**
     * Upload type compatible with graphql-upload
     */
    upload<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Upload";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
    /**
     * Upload type compatible with graphql-upload
     */
    upload<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Upload";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  ContentType: "EMOJI" | "IMAGE" | "LINK" | "TEXT" | "VIDEO"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
  Upload: any
}

export interface NexusGenObjects {
  Board: { // root type
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // String!
    title: string; // String!
  }
  File: { // root type
    encoding: string; // String!
    filename: string; // String!
    mimetype: string; // String!
  }
  Persona: { // root type
    iconUrl: string; // String!
    id: number; // Int!
    name: string; // String!
    screenName: string; // String!
  }
  Post: { // root type
    boardId: string; // String!
    content: string; // String!
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // String!
    imageUrls: Array<string | null>; // [String]!
    title: string; // String!
  }
  Query: {};
  Reply: { // root type
    boardId: string; // String!
    content: string; // String!
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // String!
    imageUrls: Array<string | null>; // [String]!
  }
  SearchResult: { // root type
    id: string; // String!
    kind: string; // String!
    title: string; // String!
  }
  Thread: { // root type
    boardId: string; // String!
    content: string; // String!
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // String!
    imageUrls: Array<string | null>; // [String]!
  }
  User: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Board: { // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // String!
    posts: Array<NexusGenRootTypes['Post'] | null>; // [Post]!
    title: string; // String!
  }
  File: { // field return type
    encoding: string; // String!
    filename: string; // String!
    mimetype: string; // String!
  }
  Persona: { // field return type
    iconUrl: string; // String!
    id: number; // Int!
    name: string; // String!
    screenName: string; // String!
  }
  Post: { // field return type
    board: NexusGenRootTypes['Board']; // Board!
    boardId: string; // String!
    content: string; // String!
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // String!
    imageUrls: Array<string | null>; // [String]!
    persona: NexusGenRootTypes['Persona']; // Persona!
    threads: Array<NexusGenRootTypes['Thread'] | null>; // [Thread]!
    title: string; // String!
  }
  Query: { // field return type
    activities: Array<Array<NexusGenRootTypes['Post'] | null> | null>; // [[Post]]!
    board: NexusGenRootTypes['Board']; // Board!
    me: NexusGenRootTypes['User']; // User!
    persona: NexusGenRootTypes['Persona']; // Persona!
    personas: Array<Array<NexusGenRootTypes['Persona'] | null> | null>; // [[Persona]]!
    post: Array<Array<NexusGenRootTypes['Post'] | null> | null>; // [[Post]]!
    removeUser: boolean; // Boolean!
    search: Array<NexusGenRootTypes['SearchResult'] | null>; // [SearchResult]!
  }
  Reply: { // field return type
    boardId: string; // String!
    content: string; // String!
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // String!
    imageUrls: Array<string | null>; // [String]!
    persona: NexusGenRootTypes['Persona']; // Persona!
  }
  SearchResult: { // field return type
    id: string; // String!
    kind: string; // String!
    title: string; // String!
  }
  Thread: { // field return type
    board: NexusGenRootTypes['Board']; // Board!
    boardId: string; // String!
    content: string; // String!
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // String!
    imageUrls: Array<string | null>; // [String]!
    persona: NexusGenRootTypes['Persona']; // Persona!
    replies: Array<NexusGenRootTypes['Reply'] | null>; // [Reply]!
  }
  User: { // field return type
    personas: Array<NexusGenRootTypes['Persona'] | null>; // [Persona]!
  }
}

export interface NexusGenFieldTypeNames {
  Board: { // field return type name
    createdAt: 'Date'
    id: 'String'
    posts: 'Post'
    title: 'String'
  }
  File: { // field return type name
    encoding: 'String'
    filename: 'String'
    mimetype: 'String'
  }
  Persona: { // field return type name
    iconUrl: 'String'
    id: 'Int'
    name: 'String'
    screenName: 'String'
  }
  Post: { // field return type name
    board: 'Board'
    boardId: 'String'
    content: 'String'
    createdAt: 'Date'
    id: 'String'
    imageUrls: 'String'
    persona: 'Persona'
    threads: 'Thread'
    title: 'String'
  }
  Query: { // field return type name
    activities: 'Post'
    board: 'Board'
    me: 'User'
    persona: 'Persona'
    personas: 'Persona'
    post: 'Post'
    removeUser: 'Boolean'
    search: 'SearchResult'
  }
  Reply: { // field return type name
    boardId: 'String'
    content: 'String'
    createdAt: 'Date'
    id: 'String'
    imageUrls: 'String'
    persona: 'Persona'
  }
  SearchResult: { // field return type name
    id: 'String'
    kind: 'String'
    title: 'String'
  }
  Thread: { // field return type name
    board: 'Board'
    boardId: 'String'
    content: 'String'
    createdAt: 'Date'
    id: 'String'
    imageUrls: 'String'
    persona: 'Persona'
    replies: 'Reply'
  }
  User: { // field return type name
    personas: 'Persona'
  }
}

export interface NexusGenArgTypes {
  Query: {
    board: { // args
      id?: string | null; // String
    }
    persona: { // args
      name?: string | null; // String
    }
    personas: { // args
      names?: Array<string | null> | null; // [String]
    }
    post: { // args
      id?: string | null; // String
    }
    removeUser: { // args
      name?: string | null; // String
    }
    search: { // args
      query?: string | null; // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}